Scene Actions

Actions are attached to a scene via some object in the tilemap.
An action has some variables (in the object) that are fed to a specific function for the given action.
The function is run on the server periodically.
Actions should be designed to handel some latency. i.e. If it is based on eliminating all NPCs of a certain type, ensure those NPCs 'stay dead' long enough for the action to trigger.

How to describe the 'dropping' of a key when all "enemies" are elliminated?

1. Are all NPCs off/dead/gone?
type: NPC exist = false;
hadrons.forEach hadron () => {
if hadron.type === 'NPC' && hadron.hidden/dead = false
    NPCs Exist = true
}

if (NPCs Exist === true && !hadron.get(THEDROP)?hasAlreadyDropped) {
  // Reset the "hasAlreadyDropped" if the enemies have respawned.
  !hadron.get(THEDROP)?hasAlreadyDropped = false
}

2. Is a "drop" on the screen now or has it already dropped?
 - The "hasAlreadyDropped" should prevent it from dropping again before the enemies respawn.
if NPCs Exist === false && hadron.get(THEDROP)?.off && !hadron.get(THEDROP)?hasAlreadyDropped {
    "drop"
    hadron.set(THEDROP).off = false;
    hadron.get(THEDROP)?hasAlreadyDropped = true;
}

New Collision option: Pickup
Pickup is like Destroy, except that:
1. There will be no delay, so other players may see it despawn before the pickup person got to it, which is fine because it reduces the likely hood of them thinking they should have gotten it.
2. They can have extra rules like:
 - You can only pick it up if you don't already have it.
 - There is one and whoever gets it first causes it to go away
    or
 - It is just there for X time and anyone can get it (multiple pickups).
 - etc.
3. The pickup is expected to modify the player's inventory.

Inventory
Each player will have an inventory.
Their inventory will be a Map of objects just like the hadrons list,
but it will be stored as a JSON entry in the SQLite table instead of in a file.
It will stay in memory and only be read from disk when the player joins.
It will be written to disk periodically (in case of a crash) and at server close like the game data.
We could wipe them from memory when a player disconnects and read them from disk when they connect?
 - Or hold on to them and if they exist, skip the SQLite read on reconnect if it exists?
 - This could fill up memory in which case we might need a periodic garbage collector of offline player inventories to be written and purged if they are offline for too long?

Each item will be a full hadron with all information about the item,
including a GUID making every item in every inventory unique,
however it may have a "parent" GUID tying it back to a specific item from somewhere, like a scene object
or other thing.

This way we can ask, "Does the user have an inventory item with parent GUID XYZ?" and know if they have the key for a given door, or something like that.
We could also broadly update all inventory instances of an item in every player's inventory,
But, we still get to have ALL data about the item right in the player's inventory so no matter what scene they are in or what has changed about the ame, they can know they have an item with sprite: borp of color :blue health: 44, etc. rather than having to refer to some master list to determine the inventory item's characteristics.

Inventory Display
Use 'i' (matches most games and is pretty easy to remember. It isn't something you want to pull up "in combat" so it doesn't need to be fast.
What icon (emoji) should I use to indicate another player is "in their inventory".
Needs to be some sort of list of items that lets you pick them for doing things with.
Probably doesn't need to let you sort them, but at least you should be able to drop something either because you don't want it anymore or to give it to someone else.
Eventually there will be like, "put on the" item too.
I feel like this is the right point to use Phaser in game elements for a mouse menu instead of HTML, as I really need to at some point and this needs to use in game sprites anyway, and has the most to win/lose from being scaled exactlly to the player's screen.
 - ALTHOUGH if your inventory could be bigger than your screen in mobile portrait, that would be nice, BUT, just play in landscape!!


New Sprite Option:
Option to only be visible to a given player if a certain thing is true.
i.e. If the player has the item in their inventory already, don't show it to them, even though the hadron is in their data packets.
